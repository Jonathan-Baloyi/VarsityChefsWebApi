// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VarsityChefsWebApi.data.DbContext;

namespace VarsityChefsWebApi.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.AlternativeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeCity");

                    b.Property<string>("AlternativeCode");

                    b.Property<string>("AlternativeCountry");

                    b.Property<string>("AlternativeLine1");

                    b.Property<string>("AlternativeLine2");

                    b.Property<string>("AlternativeLine3");

                    b.Property<string>("AlternativeProvince");

                    b.Property<string>("AlternativeSurburb");

                    b.HasKey("Id");

                    b.ToTable("AlternativeAddress");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.AlternativePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlternativeAddressId");

                    b.Property<string>("AlternativeCellNumber");

                    b.Property<string>("AlternativeEmailAddress");

                    b.Property<string>("AlternativeInitials");

                    b.Property<string>("AlternativeName");

                    b.Property<string>("AlternativeRelationShip");

                    b.Property<string>("AlternativeSurname");

                    b.Property<string>("AlternativeTelephone");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeAddressId");

                    b.ToTable("AlternativePerson");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allegies");

                    b.Property<int?>("AlternativePersonId");

                    b.Property<string>("BootSize");

                    b.Property<string>("CellNumber");

                    b.Property<string>("DateOfBirth");

                    b.Property<DateTime>("DateRegistered");

                    b.Property<bool>("Declaration");

                    b.Property<string>("Disability");

                    b.Property<bool>("DoYouHaveAnyAllegies");

                    b.Property<bool>("DoYouHaveAnyDisability");

                    b.Property<bool>("DoYouHaveApermentResidence");

                    b.Property<string>("Email");

                    b.Property<bool>("Gender");

                    b.Property<bool>("HaveYouOrYourParentsBeenEmployedByVarsityChefs");

                    b.Property<bool>("HaveYouParticipatedInCookingShowBefore");

                    b.Property<string>("IdentityId");

                    b.Property<string>("Institution");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JacketSize");

                    b.Property<string>("Nationality");

                    b.Property<int?>("PostalAddressId");

                    b.Property<string>("Qualification");

                    b.Property<int?>("ResidentialAddressId");

                    b.Property<string>("Telephone");

                    b.Property<string>("WhichCookingShows");

                    b.Property<string>("YearOfStudy");

                    b.Property<string>("YearStarted");

                    b.HasKey("Id");

                    b.HasIndex("AlternativePersonId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("ResidentialAddressId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.PostalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PostalCity");

                    b.Property<string>("PostalCode");

                    b.Property<string>("PostalCountry");

                    b.Property<string>("PostalLine1");

                    b.Property<string>("PostalLine2");

                    b.Property<string>("PostalLine3");

                    b.Property<string>("PostalProvince");

                    b.Property<string>("PostalSurburb");

                    b.HasKey("Id");

                    b.ToTable("PostalAddress");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.ResidentialAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResCity");

                    b.Property<string>("ResCode");

                    b.Property<string>("ResCountry");

                    b.Property<string>("ResLine1");

                    b.Property<string>("ResLine2");

                    b.Property<string>("ResLine3");

                    b.Property<string>("ResProvince");

                    b.Property<string>("ResSurburb");

                    b.HasKey("Id");

                    b.ToTable("ResidentialAddress");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.ToTable("AppUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.AlternativePerson", b =>
                {
                    b.HasOne("VarsityChefsWebApi.Models.AlternativeAddress", "AlternativeAddress")
                        .WithMany()
                        .HasForeignKey("AlternativeAddressId");
                });

            modelBuilder.Entity("VarsityChefsWebApi.Models.Application", b =>
                {
                    b.HasOne("VarsityChefsWebApi.Models.AlternativePerson", "AlternativePerson")
                        .WithMany()
                        .HasForeignKey("AlternativePersonId");

                    b.HasOne("VarsityChefsWebApi.Models.AppUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("VarsityChefsWebApi.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("VarsityChefsWebApi.Models.ResidentialAddress", "ResidentialAddress")
                        .WithMany()
                        .HasForeignKey("ResidentialAddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
